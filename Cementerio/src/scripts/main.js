// Gesti√≥n de Cementerio - Frontend
class CementerioApp {
    constructor() {
        this.currentSection = 'dashboard';
        this.currentPage = 1;
        this.pageSize = 10;
        this.searchFilters = {};
        this.currentSortColumn = null;
        this.currentSortDirection = 'asc';
        this.originalData = {}; // Para almacenar datos originales sin ordenar
        this.lastSearchData = null; // Para almacenar la √∫ltima b√∫squeda realizada
        this.init();
    }

    async init() {
        this.bindNavigationEvents();
        this.bindModalEvents();
        this.bindFormEvents();
        this.bindSearchEvents();
        this.bindTableSortEvents();
        
        // Inicializar ciudades populares
        this.inicializarCiudadesPopulares();
        
        // Cargar dashboard inicial
        await this.loadDashboard();
        this.showSection('dashboard');
    }

    // Navegaci√≥n
    bindNavigationEvents() {
        const navLinks = document.querySelectorAll('.nav-link');
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const section = link.getAttribute('data-section');
                this.showSection(section);
            });
        });
    }

    showSection(sectionName) {
        // Ocultar todas las secciones
        document.querySelectorAll('.content-section').forEach(section => {
            section.style.display = 'none';
        });

        // Mostrar secci√≥n seleccionada
        const targetSection = document.getElementById(`${sectionName}-section`);
        if (targetSection) {
            targetSection.style.display = 'block';
            this.currentSection = sectionName;
        }

        // Actualizar navegaci√≥n activa
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        document.querySelector(`[data-section="${sectionName}"]`)?.classList.add('active');

        // Cargar datos seg√∫n la secci√≥n
        this.loadSectionData(sectionName);
    }

    async loadSectionData(sectionName) {
        try {
            switch (sectionName) {
                case 'dashboard':
                    // Siempre actualizar dashboard al navegar a √©l
                    await this.loadDashboard();
                    break;
                case 'difuntos':
                    await this.loadDifuntos();
                    break;
                case 'parcelas':
                    await this.loadParcelas();
                    break;
                case 'busqueda':
                    // La b√∫squeda se carga bajo demanda
                    break;
                case 'configuracion':
                    await this.loadConfigurationInfo();
                    break;
            }
        } catch (error) {
            this.showNotification('Error al cargar los datos: ' + error.message, 'error');
        }
    }

    // Dashboard
    async loadDashboard() {
        try {
            // Mostrar indicadores de carga en las estad√≠sticas
            this.showDashboardLoading(true);
            
            const stats = await window.electronAPI.getEstadisticas();
            this.updateDashboardStats(stats);
            
            // Cargar actividad reciente
            await this.loadRecentActivity();
        } catch (error) {
            console.error('Error cargando dashboard:', error);
            this.showNotification('Error al cargar las estad√≠sticas', 'error');
        } finally {
            this.showDashboardLoading(false);
        }
    }

    // Mostrar/ocultar indicadores de carga en el dashboard
    showDashboardLoading(show) {
        const statsCards = ['total-difuntos', 'total-parcelas', 'parcelas-ocupadas', 'parcelas-disponibles'];
        
        statsCards.forEach(cardId => {
            const card = document.getElementById(cardId);
            if (card) {
                if (show) {
                    card.textContent = '‚ü≥';
                    card.style.opacity = '0.6';
                } else {
                    card.style.opacity = '1';
                }
            }
        });
    }

    async loadRecentActivity(showNotification = false) {
        try {
            // Mostrar animaci√≥n de carga en el bot√≥n
            const refreshButton = document.querySelector('.refresh-activity');
            if (refreshButton && showNotification) {
                refreshButton.innerHTML = '‚ü≥ Actualizando...';
                refreshButton.disabled = true;
                refreshButton.style.opacity = '0.6';
            }

            const recentActivity = await window.electronAPI.getRecentActivity(8);
            this.updateRecentActivity(recentActivity);

            // Mostrar notificaci√≥n de √©xito si se solicit√≥
            if (showNotification) {
                this.showNotification('‚úÖ Actividad reciente actualizada', 'success');
                
                // Indicador visual temporal en el header
                const activityHeader = document.querySelector('.activity-header span');
                if (activityHeader) {
                    const originalText = activityHeader.textContent;
                    activityHeader.textContent = '‚ú® Actividad Actualizada';
                    activityHeader.style.color = '#28a745';
                    
                    // Restaurar despu√©s de 2 segundos
                    setTimeout(() => {
                        activityHeader.textContent = originalText;
                        activityHeader.style.color = '';
                    }, 2000);
                }
            }

            // Restaurar bot√≥n
            if (refreshButton && showNotification) {
                setTimeout(() => {
                    refreshButton.innerHTML = '‚Üª Actualizar';
                    refreshButton.disabled = false;
                    refreshButton.style.opacity = '1';
                }, 500);
            }

        } catch (error) {
            console.error('Error cargando actividad reciente:', error);
            
            if (showNotification) {
                this.showNotification('‚ùå Error al actualizar actividad reciente', 'error');
            }
            
            // Restaurar bot√≥n en caso de error
            const refreshButton = document.querySelector('.refresh-activity');
            if (refreshButton && showNotification) {
                refreshButton.innerHTML = '‚Üª Actualizar';
                refreshButton.disabled = false;
                refreshButton.style.opacity = '1';
            }
            
            // Mostrar mensaje por defecto si hay error
            this.updateRecentActivity([]);
        }
    }

    updateRecentActivity(activities) {
        const recentList = document.getElementById('recentList');
        if (!recentList) return;

        if (!activities || activities.length === 0) {
            recentList.innerHTML = `
                <div class="no-activity">
                    <div class="activity-icon">üìù</div>
                    <p>No hay actividad reciente para mostrar.</p>
                    <small>Las nuevas acciones aparecer√°n aqu√≠.</small>
                </div>
            `;
            return;
        }

        const activitiesHtml = activities.map(activity => {
            const icon = this.getActivityIcon(activity.tipo);
            const actionClass = this.getActivityActionClass(activity.accion, activity.tipo);
            const badge = this.getActivityBadge(activity.tipo);
            
            return `
                <div class="activity-item ${actionClass}">
                    <div class="activity-icon">${icon}</div>
                    <div class="activity-content">
                        <div class="activity-title">${activity.descripcion}</div>
                        <div class="activity-action">${activity.accion}</div>
                    </div>
                    <div class="activity-meta">
                        <div class="activity-badge">${badge}</div>
                        <div class="activity-time">${activity.fecha}</div>
                    </div>
                </div>
            `;
        }).join('');

        recentList.innerHTML = `
            <div class="activity-header">
                <span>üìä Actividad Reciente</span>
                <button class="refresh-activity" onclick="app.loadRecentActivity(true)" title="Actualizar">
                    ‚Üª Actualizar
                </button>
            </div>
            ${activitiesHtml}
        `;
    }

    getActivityIcon(tipo) {
        const icons = {
            'difunto': 'üë§',
            'parcela': 'üèõÔ∏è',
            'sistema': '‚öôÔ∏è',
            'backup': 'üíæ',
            'optimizacion': '‚ö°'
        };
        return icons[tipo] || 'üìù';
    }

    getActivityClass(tipo) {
        const classes = {
            'difunto': 'activity-difunto',
            'parcela': 'activity-parcela',
            'sistema': 'activity-sistema',
            'backup': 'activity-backup',
            'optimizacion': 'activity-optimize'
        };
        return classes[tipo] || 'activity-default';
    }

    getActivityActionClass(accion, tipo) {
        // Determinar color basado en la acci√≥n
        if (accion === 'Eliminado' || accion === 'Eliminada') {
            return 'activity-deleted';
        } else if (accion === 'Modificado' || accion === 'Modificada') {
            return 'activity-modified';
        } else if (accion === 'Nuevo registro' || accion === 'Nueva parcela') {
            return 'activity-created';
        }
        
        // Fallback a la clase basada en tipo
        return this.getActivityClass(tipo);
    }

    getActivityBadge(tipo) {
        const badges = {
            'difunto': 'Difunto',
            'parcela': 'Parcela',
            'sistema': 'Sistema',
            'backup': 'Respaldo',
            'optimizacion': 'Optimizado'
        };
        return badges[tipo] || 'Acci√≥n';
    }

    updateDashboardStats(stats) {
        const statsCards = {
            'total-difuntos': stats.totalDifuntos || 0,
            'total-parcelas': stats.totalParcelas || 0,
            'parcelas-ocupadas': stats.parcelasOcupadas || 0,
            'parcelas-disponibles': stats.parcelasDisponibles || 0
        };

        Object.keys(statsCards).forEach(cardId => {
            const card = document.getElementById(cardId);
            if (card) {
                card.textContent = statsCards[cardId];
            }
        });

        // Hacer clickeables las tarjetas de estad√≠sticas
        this.makeStatsCardsClickable();
    }

    makeStatsCardsClickable() {
        // Tarjeta de Total Difuntos -> Secci√≥n Difuntos
        const totalDifuntosCard = document.getElementById('total-difuntos');
        if (totalDifuntosCard && totalDifuntosCard.parentElement) {
            const cardContainer = totalDifuntosCard.parentElement;
            cardContainer.style.cursor = 'pointer';
            cardContainer.title = 'Haz clic para ver todos los difuntos';
            
            // Remover event listeners previos
            cardContainer.replaceWith(cardContainer.cloneNode(true));
            const newCardContainer = document.getElementById('total-difuntos').parentElement;
            
            newCardContainer.addEventListener('click', () => {
                this.showSection('difuntos');
            });
        }

        // Tarjeta de Total Parcelas -> Secci√≥n Parcelas
        const totalParcelasCard = document.getElementById('total-parcelas');
        if (totalParcelasCard && totalParcelasCard.parentElement) {
            const cardContainer = totalParcelasCard.parentElement;
            cardContainer.style.cursor = 'pointer';
            cardContainer.title = 'Haz clic para ver todas las parcelas';
            
            cardContainer.replaceWith(cardContainer.cloneNode(true));
            const newCardContainer = document.getElementById('total-parcelas').parentElement;
            
            newCardContainer.addEventListener('click', () => {
                this.showSection('parcelas');
            });
        }

        // Tarjeta de Parcelas Ocupadas -> Secci√≥n Parcelas
        const parcelasOcupadasCard = document.getElementById('parcelas-ocupadas');
        if (parcelasOcupadasCard && parcelasOcupadasCard.parentElement) {
            const cardContainer = parcelasOcupadasCard.parentElement;
            cardContainer.style.cursor = 'pointer';
            cardContainer.title = 'Haz clic para ver las parcelas ocupadas';
            
            cardContainer.replaceWith(cardContainer.cloneNode(true));
            const newCardContainer = document.getElementById('parcelas-ocupadas').parentElement;
            
            newCardContainer.addEventListener('click', () => {
                this.showSection('parcelas');
            });
        }

        // Tarjeta de Parcelas Disponibles -> Secci√≥n Parcelas
        const parcelasDisponiblesCard = document.getElementById('parcelas-disponibles');
        if (parcelasDisponiblesCard && parcelasDisponiblesCard.parentElement) {
            const cardContainer = parcelasDisponiblesCard.parentElement;
            cardContainer.style.cursor = 'pointer';
            cardContainer.title = 'Haz clic para ver las parcelas disponibles';
            
            cardContainer.replaceWith(cardContainer.cloneNode(true));
            const newCardContainer = document.getElementById('parcelas-disponibles').parentElement;
            
            newCardContainer.addEventListener('click', () => {
                this.showSection('parcelas');
            });
        }
    }

    // Gesti√≥n de Difuntos
    async loadDifuntos() {
        try {
            this.showLoading('difuntos-table-container');
            const difuntos = await window.electronAPI.getDifuntos();
            this.originalData.difuntos = difuntos; // Guardar datos originales
            
            // Aplicar ordenamiento por defecto: ID ascendente
            this.currentSortColumn = 'id';
            this.currentSortDirection = 'asc';
            const sortedDifuntos = this.sortData(difuntos, 'id');
            
            this.renderDifuntosTable(sortedDifuntos);
            this.updateSortIcons('difuntos', 'id'); // Mostrar indicador visual
        } catch (error) {
            console.error('Error cargando difuntos:', error);
            this.showNotification('Error al cargar los difuntos', 'error');
        } finally {
            this.hideLoading('difuntos-table-container');
        }
    }

    renderDifuntosTable(difuntos) {
        const tableBody = document.querySelector('#difuntos-table tbody');
        if (!tableBody) return;

        tableBody.innerHTML = '';

        difuntos.forEach(difunto => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>#${difunto.id}</td>
                <td><strong>${difunto.nombre} ${difunto.apellidos}</strong></td>
                <td>${this.formatDate(difunto.fecha_nacimiento)}</td>
                <td>${this.formatDate(difunto.fecha_defuncion)}</td>
                <td>${difunto.parcela_numero ? `üèõÔ∏è ${difunto.parcela_numero}` : '<span class="badge badge-sin-asignar">Sin asignar</span>'}</td>
                <td class="action-buttons">
                    <button class="btn btn-small btn-secondary" onclick="app.editDifunto(${difunto.id})">
                        ‚úèÔ∏è Editar
                    </button>
                    <button class="btn btn-small btn-danger" onclick="app.deleteDifunto(${difunto.id})">
                        üóëÔ∏è Eliminar
                    </button>
                </td>
            `;
            tableBody.appendChild(row);
        });
    }

    // Gesti√≥n de Parcelas
    async loadParcelas() {
        try {
            this.showLoading('parcelas-table-container');
            const parcelas = await window.electronAPI.getParcelas();
            this.originalData.parcelas = parcelas; // Guardar datos originales
            
            // Aplicar ordenamiento por defecto: C√≥digo ascendente
            this.currentSortColumn = 'codigo';
            this.currentSortDirection = 'asc';
            const sortedParcelas = this.sortData(parcelas, 'codigo');
            
            this.renderParcelasTable(sortedParcelas);
            this.updateSortIcons('parcelas', 'codigo'); // Mostrar indicador visual
        } catch (error) {
            console.error('Error cargando parcelas:', error);
            this.showNotification('Error al cargar las parcelas', 'error');
        } finally {
            this.hideLoading('parcelas-table-container');
        }
    }

    renderParcelasTable(parcelas) {
        const tableBody = document.querySelector('#parcelas-table tbody');
        if (!tableBody) return;

        tableBody.innerHTML = '';

        parcelas.forEach(parcela => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${parcela.codigo}</td>
                <td><span class="badge badge-${parcela.tipo}">${parcela.tipo}</span></td>
                <td><span class="badge badge-zona-${parcela.zona?.toLowerCase()}">${parcela.zona || 'N/A'}</span></td>
                <td>${parcela.seccion}-${parcela.numero}</td>
                <td>${parcela.fila || 'S/N'}</td>
                <td><span class="badge badge-ubicacion">${parcela.ubicacion || 'N/A'}</span></td>
                <td><span class="status ${parcela.estado}">${parcela.estado}</span></td>
                <td>${parcela.precio ? '$' + parcela.precio.toFixed(2) : 'N/A'}</td>
                <td class="action-buttons">
                    <button class="btn btn-small btn-secondary" onclick="app.editParcela(${parcela.id})">
                        ‚úèÔ∏è Editar
                    </button>
                    <button class="btn btn-small btn-danger" onclick="app.deleteParcela(${parcela.id})">
                        üóëÔ∏è Eliminar
                    </button>
                </td>
            `;
            tableBody.appendChild(row);
        });
    }

    // Modales
    bindModalEvents() {
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            const closeBtn = modal.querySelector('.close');
            const cancelBtn = modal.querySelector('.btn-secondary');
            
            if (closeBtn) {
                closeBtn.addEventListener('click', () => this.closeModal(modal.id));
            }
            
            if (cancelBtn) {
                cancelBtn.addEventListener('click', () => this.closeModal(modal.id));
            }
            
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeModal(modal.id);
                }
            });
        });

        // Botones para abrir modales
        document.getElementById('btn-nuevo-difunto')?.addEventListener('click', async () => {
            // Limpiar modo edici√≥n
            const form = document.getElementById('form-difunto');
            if (form) {
                delete form.dataset.editingId;
                form.reset();
            }
            
            // Cargar parcelas disponibles
            await this.loadParcelasDisponibles();
            
            // Restaurar t√≠tulo del modal
            const modalTitle = document.querySelector('#modal-difunto .modal-header h3');
            if (modalTitle) modalTitle.textContent = 'Nuevo Difunto';
            
            this.openModal('modal-difunto');
        });

        document.getElementById('btn-nueva-parcela')?.addEventListener('click', () => {
            // Limpiar modo edici√≥n para parcelas tambi√©n
            const form = document.getElementById('form-parcela');
            if (form) {
                delete form.dataset.editingId;
                form.reset();
            }
            
            // Restaurar t√≠tulo del modal
            const modalTitle = document.querySelector('#modal-parcela .modal-header h3');
            if (modalTitle) modalTitle.textContent = 'Nueva Parcela';
            
            this.openModal('modal-parcela');
        });
    }

    openModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }
    }

    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
            this.resetForm(modal);
        }
    }

    resetForm(modal) {
        const form = modal.querySelector('form');
        if (form) {
            form.reset();
            // Limpiar cualquier error de validaci√≥n
            form.querySelectorAll('.error').forEach(el => el.remove());
        }
    }

    // Formularios
    bindFormEvents() {
        const formDifunto = document.getElementById('form-difunto');
        const formParcela = document.getElementById('form-parcela');

        if (formDifunto) {
            formDifunto.addEventListener('submit', (e) => this.handleDifuntoSubmit(e));
        }

        if (formParcela) {
            formParcela.addEventListener('submit', (e) => this.handleParcelaSubmit(e));
        }
    }

    async handleDifuntoSubmit(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const difuntoData = {
            nombre: formData.get('nombre'),
            apellidos: formData.get('apellidos'),
            documento: formData.get('documento'),
            sexo: formData.get('sexo') || 'M', // Valor por defecto si no se selecciona
            fecha_nacimiento: formData.get('fecha_nacimiento'),
            fecha_defuncion: formData.get('fecha_defuncion'),
            lugar_nacimiento: formData.get('lugar_nacimiento'),
            causa_muerte: formData.get('causa_muerte'),
            observaciones: formData.get('observaciones'),
            parcela_id: formData.get('parcela_id') || null
        };

        try {
            const editingId = e.target.dataset.editingId;
            
            if (editingId) {
                // Actualizar difunto existente
                await window.electronAPI.updateDifunto(editingId, difuntoData);
                this.showNotification('Difunto actualizado correctamente', 'success');
            } else {
                // Crear nuevo difunto
                await window.electronAPI.createDifunto(difuntoData);
                this.showNotification('Difunto registrado correctamente', 'success');
            }
            
            this.closeModal('modal-difunto');
            
            // Actualizar la secci√≥n actual si corresponde
            if (this.currentSection === 'difuntos') {
                await this.loadDifuntos();
            }
            if (this.currentSection === 'parcelas') {
                await this.loadParcelas();
            }
            if (this.currentSection === 'busqueda') {
                // Refrescar la b√∫squeda si estamos en esa secci√≥n
                await this.refreshLastSearch();
            }
            
            // SIEMPRE actualizar dashboard para refrescar estad√≠sticas
            await this.loadDashboard();
            await this.loadRecentActivity(); // Actualizar actividad reciente
        } catch (error) {
            console.error('Error procesando difunto:', error);
            this.showNotification('Error al procesar el difunto: ' + error.message, 'error');
        }
    }

    async handleParcelaSubmit(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const parcelaData = {
            codigo: formData.get('codigo'),
            tipo: formData.get('tipo'),
            zona: formData.get('zona'),
            seccion: formData.get('seccion'),
            fila: parseInt(formData.get('fila')) || null,
            numero: parseInt(formData.get('numero')),
            ubicacion: formData.get('ubicacion'),
            precio: parseFloat(formData.get('precio')) || 0,
            observaciones: formData.get('observaciones')
        };

        try {
            const editingId = e.target.dataset.editingId;
            
            if (editingId) {
                // Actualizar parcela existente
                await window.electronAPI.updateParcela(editingId, parcelaData);
                this.showNotification('‚úÖ Parcela actualizada correctamente', 'success');
            } else {
                // Crear nueva parcela
                await window.electronAPI.createParcela(parcelaData);
                this.showNotification('‚úÖ Parcela creada correctamente', 'success');
            }
            
            this.closeModal('modal-parcela');
            
            // Actualizar la secci√≥n actual si corresponde
            if (this.currentSection === 'parcelas') {
                await this.loadParcelas();
            }
            
            // SIEMPRE actualizar dashboard para refrescar estad√≠sticas
            await this.loadDashboard();
            await this.loadRecentActivity(); // Actualizar actividad reciente
        } catch (error) {
            console.error('Error procesando parcela:', error);
            this.showNotification('‚ùå Error al procesar la parcela: ' + error.message, 'error');
        }
    }

    // B√∫squeda
    bindSearchEvents() {
        const searchForm = document.getElementById('search-form');
        const clearButton = document.querySelector('#search-form button[type="reset"]');

        if (searchForm) {
            searchForm.addEventListener('submit', (e) => this.handleSearch(e));
        }

        if (clearButton) {
            clearButton.addEventListener('click', (e) => this.handleClearSearch(e));
        }
    }

    handleClearSearch(e) {
        // Limpiar los resultados de b√∫squeda
        const resultsContainer = document.getElementById('search-results');
        if (resultsContainer) {
            resultsContainer.innerHTML = '<p>Utiliza los filtros para buscar registros</p>';
            resultsContainer.className = 'search-results empty';
        }
        
        // Limpiar la √∫ltima b√∫squeda guardada
        this.lastSearchData = null;
        
        // Mostrar notificaci√≥n
        this.showNotification('B√∫squeda limpiada', 'success');
    }

    async handleSearch(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const searchData = {
            nombre: formData.get('search-nombre'),
            apellidos: formData.get('search-apellidos'),
            fecha_desde: formData.get('search-fecha-desde'),
            fecha_hasta: formData.get('search-fecha-hasta')
        };

        // Solo buscar si hay al menos un campo con datos
        const hasSearchData = Object.values(searchData).some(value => value && value.trim() !== '');
        
        if (!hasSearchData) {
            this.showNotification('Por favor, ingrese al menos un criterio de b√∫squeda', 'info');
            return;
        }

        // Guardar los datos de b√∫squeda para poder repetir la b√∫squeda m√°s tarde
        this.lastSearchData = searchData;

        try {
            this.showLoading('search-results');
            const results = await window.electronAPI.searchDifuntos(searchData);
            this.renderSearchResults(results);
        } catch (error) {
            console.error('Error en b√∫squeda:', error);
            this.showNotification('Error en la b√∫squeda: ' + error.message, 'error');
        } finally {
            this.hideLoading('search-results');
        }
    }

    renderSearchResults(results) {
        const container = document.getElementById('search-results');
        if (!container) return;

        if (results.length === 0) {
            container.innerHTML = '<p class="empty">No se encontraron resultados</p>';
            container.className = 'search-results empty';
            return;
        }

        container.className = 'search-results';
        container.innerHTML = `
            <table class="records-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre Completo</th>
                        <th>Fecha Defunci√≥n</th>
                        <th>Parcela Asignada</th>
                        <th class="action-header">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    ${results.map(result => `
                        <tr>
                            <td>${result.id}</td>
                            <td>${result.nombre} ${result.apellidos}</td>
                            <td>${this.formatDate(result.fecha_defuncion)}</td>
                            <td>
                                ${result.parcela_codigo 
                                    ? `üèõÔ∏è ${result.parcela_codigo}` 
                                    : '<span class="badge badge-sin-asignar">Sin asignar</span>'
                                }
                            </td>
                            <td class="action-buttons">
                                <button class="btn btn-small btn-primary" onclick="app.editDifunto(${result.id})">
                                    ‚úèÔ∏è Editar
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }

    // Funci√≥n para repetir la √∫ltima b√∫squeda realizada
    async refreshLastSearch() {
        if (!this.lastSearchData) {
            return; // No hay b√∫squeda previa para repetir
        }

        try {
            this.showLoading('search-results');
            const results = await window.electronAPI.searchDifuntos(this.lastSearchData);
            this.renderSearchResults(results);
        } catch (error) {
            console.error('Error refrescando b√∫squeda:', error);
            this.showNotification('Error al actualizar los resultados de b√∫squeda: ' + error.message, 'error');
        } finally {
            this.hideLoading('search-results');
        }
    }

    // Funciones de ordenamiento de tablas
    bindTableSortEvents() {
        // Event listeners para tabla de difuntos
        document.addEventListener('click', (e) => {
            if (e.target.closest('#difuntos-table th.sortable')) {
                const th = e.target.closest('th.sortable');
                const column = th.dataset.column;
                this.sortTable('difuntos', column);
            }
        });

        // Event listeners para tabla de parcelas
        document.addEventListener('click', (e) => {
            if (e.target.closest('#parcelas-table th.sortable')) {
                const th = e.target.closest('th.sortable');
                const column = th.dataset.column;
                this.sortTable('parcelas', column);
            }
        });
    }

    sortTable(tableType, column) {
        // Determinar direcci√≥n de ordenamiento
        if (this.currentSortColumn === column) {
            this.currentSortDirection = this.currentSortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            this.currentSortDirection = 'asc';
        }
        this.currentSortColumn = column;

        // Actualizar iconos visuales
        this.updateSortIcons(tableType, column);

        // Ordenar datos
        if (tableType === 'difuntos') {
            const sortedData = this.sortData(this.originalData.difuntos || [], column);
            this.renderDifuntosTable(sortedData);
        } else if (tableType === 'parcelas') {
            const sortedData = this.sortData(this.originalData.parcelas || [], column);
            this.renderParcelasTable(sortedData);
        }
    }

    updateSortIcons(tableType, column) {
        // Limpiar iconos anteriores
        const table = document.getElementById(`${tableType}-table`);
        const headers = table.querySelectorAll('th.sortable');
        headers.forEach(th => {
            th.classList.remove('sort-asc', 'sort-desc');
        });

        // Agregar icono al header actual
        const currentHeader = table.querySelector(`th[data-column="${column}"]`);
        if (currentHeader) {
            currentHeader.classList.add(`sort-${this.currentSortDirection}`);
        }
    }

    sortData(data, column) {
        return [...data].sort((a, b) => {
            let aVal = a[column];
            let bVal = b[column];

            // Manejar casos especiales
            if (column === 'nombre') {
                aVal = `${a.nombre} ${a.apellidos}`;
                bVal = `${b.nombre} ${b.apellidos}`;
            } else if (column === 'precio') {
                aVal = parseFloat(aVal) || 0;
                bVal = parseFloat(bVal) || 0;
            } else if (column === 'id' || column === 'fila') {
                aVal = parseInt(aVal) || 0;
                bVal = parseInt(bVal) || 0;
            } else if (column.includes('fecha')) {
                aVal = new Date(aVal || '1900-01-01');
                bVal = new Date(bVal || '1900-01-01');
            }

            // Manejar valores null/undefined
            if (aVal == null && bVal == null) return 0;
            if (aVal == null) return 1;
            if (bVal == null) return -1;

            // Comparaci√≥n
            let result = 0;
            if (typeof aVal === 'string' && typeof bVal === 'string') {
                result = aVal.localeCompare(bVal);
            } else {
                result = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
            }

            return this.currentSortDirection === 'desc' ? -result : result;
        });
    }

    // M√©todo para cargar parcelas disponibles en el select
    async loadParcelasDisponibles() {
        try {
            const parcelas = await window.electronAPI.getParcelasDisponibles();
            const select = document.getElementById('parcela_id');
            
            if (select) {
                // Limpiar opciones existentes excepto la primera
                select.innerHTML = '<option value="">Sin asignar</option>';
                
                // Agregar parcelas disponibles
                parcelas.forEach(parcela => {
                    const option = document.createElement('option');
                    option.value = parcela.id;
                    option.textContent = `${parcela.codigo} - ${parcela.seccion}-${parcela.numero} (${parcela.tipo})`;
                    select.appendChild(option);
                });
                
                // Inicializar mensaje
                this.updateParcelaMessage('', '');
            }
        } catch (error) {
            console.error('Error cargando parcelas disponibles:', error);
        }
    }

    // M√©todo para actualizar el mensaje de parcela seleccionada
    updateParcelaMessage(parcelaId, parcelaText) {
        const statusDiv = document.getElementById('parcela-status');
        const messageSpan = document.getElementById('parcela-message');
        
        if (!statusDiv || !messageSpan) return;
        
        if (parcelaId && parcelaId !== '') {
            // Parcela seleccionada
            statusDiv.style.display = 'flex';
            statusDiv.className = 'parcela-status-right';
            
            // Extraer informaci√≥n m√°s clara de la parcela
            let parcelaInfo = 'Parcela seleccionada';
            if (parcelaText && parcelaText.trim() !== '') {
                // Si el texto viene en formato "C√ìDIGO - SECCI√ìN-NUMERO (TIPO)"
                // Extraer solo la parte m√°s importante
                const match = parcelaText.match(/([A-Z\d]+)\s*-\s*([A-Z\d]+)-(\d+)/);
                if (match) {
                    const [, codigo, seccion, numero] = match;
                    parcelaInfo = `${codigo} - ${seccion}-${numero}`;
                } else {
                    parcelaInfo = parcelaText;
                }
            } else {
                // Si no hay texto, intentar obtenerlo del select
                const selectElement = document.getElementById('parcela_id');
                if (selectElement && selectElement.selectedIndex > 0) {
                    const selectedOption = selectElement.options[selectElement.selectedIndex];
                    const text = selectedOption.textContent;
                    const match = text.match(/([A-Z\d]+)\s*-\s*([A-Z\d]+)-(\d+)/);
                    if (match) {
                        const [, codigo, seccion, numero] = match;
                        parcelaInfo = `${codigo} - ${seccion}-${numero}`;
                    } else {
                        parcelaInfo = text;
                    }
                }
            }
            
            messageSpan.textContent = `Parcela asignada: ${parcelaInfo}`;
        } else {
            // Sin parcela
            statusDiv.style.display = 'flex';
            statusDiv.className = 'parcela-status-right sin-asignar';
            messageSpan.textContent = 'Sin parcela asignada';
        }
    }

    // M√©todo espec√≠fico para actualizar mensaje de parcela durante la edici√≥n
    async updateParcelaMensajeEnEdicion(parcelaId) {
        if (!parcelaId) {
            // Sin parcela asignada
            this.updateParcelaMessage('', '');
            return;
        }

        try {
            // Obtener informaci√≥n completa de la parcela desde el select
            const selectElement = document.getElementById('parcela_id');
            if (selectElement) {
                // Buscar la opci√≥n correspondiente
                const option = Array.from(selectElement.options).find(opt => opt.value === parcelaId.toString());
                if (option && option.textContent) {
                    this.updateParcelaMessage(parcelaId, option.textContent);
                    return;
                }
            }

            // Si no se encuentra en el select, intentar obtener de la API
            const parcela = await window.electronAPI.getParcela(parcelaId);
            if (parcela) {
                const parcelaInfo = `${parcela.codigo} - ${parcela.seccion}-${parcela.numero} (${parcela.tipo})`;
                this.updateParcelaMessage(parcelaId, parcelaInfo);
            } else {
                this.updateParcelaMessage(parcelaId, 'Parcela no encontrada');
            }
        } catch (error) {
            console.error('Error obteniendo informaci√≥n de parcela:', error);
            this.updateParcelaMessage(parcelaId, 'Error obteniendo parcela');
        }
    }

    // M√©todo para buscar ciudades din√°micamente
    async buscarCiudades(termino) {
        if (!termino || termino.length < 1) {
            // Si no hay t√©rmino o es muy corto, mostrar ciudades populares
            this.inicializarCiudadesPopulares();
            return;
        }

        // Cancelar b√∫squeda anterior si existe
        if (this.busquedaTimeout) {
            clearTimeout(this.busquedaTimeout);
        }

        // Debouncing - esperar 200ms antes de buscar (reducido para mejor UX)
        this.busquedaTimeout = setTimeout(async () => {
            await this.realizarBusquedaCiudades(termino);
        }, 200);
    }

    async realizarBusquedaCiudades(termino) {
        const loadingIndicator = document.getElementById('ciudades-loading');

        try {
            // Mostrar indicador de carga
            if (loadingIndicator) {
                loadingIndicator.style.display = 'flex';
            }

            // Buscar primero en la base de datos local (m√°s r√°pido y confiable)
            let ciudades = this.buscarCiudadesLocal(termino);

            // Si hay menos de 5 ciudades locales, buscar en APIs para complementar
            if (ciudades.length < 5) {
                try {
                    const ciudadesAPI = await this.buscarCiudadesEnAPI(termino);
                    // Combinar resultados evitando duplicados
                    ciudadesAPI.forEach(ciudad => {
                        if (!ciudades.some(c => c.toLowerCase() === ciudad.toLowerCase())) {
                            ciudades.push(ciudad);
                        }
                    });
                } catch (apiError) {
                    console.log('APIs no disponibles, usando solo b√∫squeda local:', apiError.message);
                }
            }

            // Actualizar la lista de opciones - mostrar hasta 50 resultados
            this.actualizarListaCiudades(ciudades.slice(0, 50));

        } catch (error) {
            console.error('Error buscando ciudades:', error);
            // En caso de error, usar solo b√∫squeda local
            const ciudadesLocal = this.buscarCiudadesLocal(termino);
            this.actualizarListaCiudades(ciudadesLocal.slice(0, 20));
        } finally {
            // Ocultar indicador de carga
            if (loadingIndicator) {
                loadingIndicator.style.display = 'none';
            }
        }
    }

    // B√∫squeda local r√°pida y confiable
    buscarCiudadesLocal(termino) {
        const terminoLower = termino.toLowerCase();
        const todasLasCiudades = this.obtenerCiudadesInternacionales();
        
        return todasLasCiudades
            .filter(ciudad => ciudad.toLowerCase().includes(terminoLower))
            .sort((a, b) => {
                // Priorizar ciudades que empiecen con el t√©rmino
                const aStartsWith = a.toLowerCase().startsWith(terminoLower);
                const bStartsWith = b.toLowerCase().startsWith(terminoLower);
                
                if (aStartsWith && !bStartsWith) return -1;
                if (!aStartsWith && bStartsWith) return 1;
                return a.localeCompare(b);
            });
    }

    // Buscar ciudades en APIs externas (mejorado y m√°s completo)
    async buscarCiudadesEnAPI(termino) {
        const ciudades = [];
        
        // 1. API de REST Countries para capitales
        try {
            const response = await fetch(`https://restcountries.com/v3.1/all?fields=name,capital`, {
                signal: AbortSignal.timeout(3000)
            });
            
            if (response.ok) {
                const paises = await response.json();
                const terminoLower = termino.toLowerCase();
                
                paises.forEach(pais => {
                    if (pais.capital && pais.capital[0]) {
                        const capital = pais.capital[0];
                        const paisNombre = pais.name.common;
                        if (capital.toLowerCase().includes(terminoLower)) {
                            ciudades.push(`${capital}, ${paisNombre}`);
                        }
                    }
                });
            }
        } catch (error) {
            console.log('API REST Countries no disponible:', error.message);
        }

        // 2. API de OpenStreetMap Nominatim (alternativa gratuita y robusta)
        try {
            const nominatimUrl = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(termino)}&format=json&addressdetails=1&limit=20&countrycodes=es&featuretype=city`;
            
            const response = await fetch(nominatimUrl, {
                headers: {
                    'User-Agent': 'CementerioApp/1.0'
                },
                signal: AbortSignal.timeout(5000)
            });
            
            if (response.ok) {
                const resultados = await response.json();
                resultados.forEach(resultado => {
                    if (resultado.display_name && resultado.address) {
                        let ciudad = resultado.address.city || 
                                   resultado.address.town || 
                                   resultado.address.village || 
                                   resultado.address.municipality ||
                                   resultado.name;
                        
                        if (ciudad) {
                            const pais = resultado.address.country || 'Espa√±a';
                            const ciudadFormateada = `${ciudad}, ${pais}`;
                            
                            // Evitar duplicados
                            if (!ciudades.some(c => c.toLowerCase() === ciudadFormateada.toLowerCase())) {
                                ciudades.push(ciudadFormateada);
                            }
                        }
                    }
                });
            }
        } catch (error) {
            console.log('API Nominatim no disponible:', error.message);
        }

        // 3. API adicional para ciudades espa√±olas (usando API del gobierno)
        try {
            // Esta API es espec√≠fica para Espa√±a y muy completa
            const spainUrl = `https://apiv1.geoapi.es/municipios?q=${encodeURIComponent(termino)}`;
            
            const response = await fetch(spainUrl, {
                signal: AbortSignal.timeout(4000)
            });
            
            if (response.ok) {
                const resultados = await response.json();
                if (resultados && resultados.data) {
                    resultados.data.forEach(municipio => {
                        if (municipio.NOMBRE_MUNICIPIO) {
                            const ciudadFormateada = `${municipio.NOMBRE_MUNICIPIO}, Espa√±a`;
                            if (!ciudades.some(c => c.toLowerCase() === ciudadFormateada.toLowerCase())) {
                                ciudades.push(ciudadFormateada);
                            }
                        }
                    });
                }
            }
        } catch (error) {
            console.log('API GeoAPI Espa√±a no disponible:', error.message);
        }

        return ciudades.slice(0, 15); // Limitar resultados de API para no saturar
    }

    // Base de datos local de ciudades internacionales
    obtenerCiudadesInternacionales() {
        return [
            // Espa√±a - Lista expandida de ciudades y pueblos
            'Madrid, Espa√±a', 'Barcelona, Espa√±a', 'Valencia, Espa√±a', 'Sevilla, Espa√±a',
            'Zaragoza, Espa√±a', 'M√°laga, Espa√±a', 'Murcia, Espa√±a', 'Palma de Mallorca, Espa√±a',
            'Las Palmas, Espa√±a', 'Bilbao, Espa√±a', 'Alicante, Espa√±a', 'C√≥rdoba, Espa√±a',
            'Valladolid, Espa√±a', 'Vigo, Espa√±a', 'Gij√≥n, Espa√±a', 'A Coru√±a, Espa√±a',
            'Vitoria, Espa√±a', 'Granada, Espa√±a', 'Elche, Espa√±a', 'Oviedo, Espa√±a',
            'Santa Cruz de Tenerife, Espa√±a', 'Badalona, Espa√±a', 'Cartagena, Espa√±a',
            'Terrassa, Espa√±a', 'Jerez de la Frontera, Espa√±a', 'Sabadell, Espa√±a',
            'M√≥stoles, Espa√±a', 'Alcal√° de Henares, Espa√±a', 'Pamplona, Espa√±a',
            'Fuenlabrada, Espa√±a', 'Almer√≠a, Espa√±a', 'Legan√©s, Espa√±a', 'San Sebasti√°n, Espa√±a',
            'Burgos, Espa√±a', 'Santander, Espa√±a', 'Castell√≥n, Espa√±a', 'Alcorc√≥n, Espa√±a',
            'Albacete, Espa√±a', 'Getafe, Espa√±a', 'Salamanca, Espa√±a', 'Huelva, Espa√±a',
            'Badajoz, Espa√±a', 'Logro√±o, Espa√±a', 'Tarragona, Espa√±a', 'Le√≥n, Espa√±a',
            'C√°diz, Espa√±a', 'L√©rida, Espa√±a', 'Marbella, Espa√±a', 'Dos Hermanas, Espa√±a',
            'Matar√≥, Espa√±a', 'Santa Coloma de Gramanet, Espa√±a', 'Torrej√≥n de Ardoz, Espa√±a',
            'Parla, Espa√±a', 'Alcobendas, Espa√±a', 'Reus, Espa√±a', 'Torrelavega, Espa√±a',
            
            // M√°s ciudades espa√±olas (expandida significativamente)
            'C√°ceres, Espa√±a', 'Toledo, Espa√±a', '√Åvila, Espa√±a', 'Cuenca, Espa√±a', 'Guadalajara, Espa√±a',
            'Huesca, Espa√±a', 'Ja√©n, Espa√±a', 'Orense, Espa√±a', 'Palencia, Espa√±a', 'Segovia, Espa√±a',
            'Soria, Espa√±a', 'Teruel, Espa√±a', 'Zamora, Espa√±a', 'Ceuta, Espa√±a', 'Melilla, Espa√±a',
            
            // Ciudades y pueblos importantes de Espa√±a
            'Alcoy, Espa√±a', 'Elda, Espa√±a', 'Petrer, Espa√±a', 'Villena, Espa√±a', 'Denia, Espa√±a',
            'X√†bia, Espa√±a', 'Calpe, Espa√±a', 'Altea, Espa√±a', 'Benidorm, Espa√±a', 'Torrevieja, Espa√±a',
            'Orihuela, Espa√±a', 'Crevillente, Espa√±a', 'Aspe, Espa√±a', 'Novelda, Espa√±a', 'Mon√≥var, Espa√±a',
            'Alcantarilla, Espa√±a', 'Molina de Segura, Espa√±a', 'Las Torres de Cotillas, Espa√±a',
            'Cieza, Espa√±a', 'Yecla, Espa√±a', 'Jumilla, Espa√±a', 'Caravaca de la Cruz, Espa√±a',
            'Lorca, Espa√±a', '√Åguilas, Espa√±a', 'Mazarr√≥n, Espa√±a', 'San Javier, Espa√±a',
            
            // Comunidad Valenciana
            'Sagunto, Espa√±a', 'Gandia, Espa√±a', 'Alzira, Espa√±a', 'X√†tiva, Espa√±a', 'Cullera, Espa√±a',
            'Sueca, Espa√±a', 'Ontinyent, Espa√±a', 'Alcoi, Espa√±a', 'Elche, Espa√±a', 'Santa Pola, Espa√±a',
            'Guardamar del Segura, Espa√±a', 'Pilar de la Horadada, Espa√±a', 'San Vicente del Raspeig, Espa√±a',
            'Campello, Espa√±a', 'Muchamiel, Espa√±a', 'San Juan de Alicante, Espa√±a', 'Mutxamel, Espa√±a',
            
            // Catalu√±a
            'Girona, Espa√±a', 'Figueres, Espa√±a', 'Olot, Espa√±a', 'Blanes, Espa√±a', 'Lloret de Mar, Espa√±a',
            'Manresa, Espa√±a', 'Vic, Espa√±a', 'Igualada, Espa√±a', 'Vilafranca del Pened√®s, Espa√±a',
            'Sitges, Espa√±a', 'Vilanova i la Geltr√∫, Espa√±a', 'Martorell, Espa√±a', 'Cornell√† de Llobregat, Espa√±a',
            'Sant Boi de Llobregat, Espa√±a', 'Mollet del Vall√®s, Espa√±a', 'Cerdanyola del Vall√®s, Espa√±a',
            
            // Andaluc√≠a
            'Antequera, Espa√±a', 'Ronda, Espa√±a', 'Estepona, Espa√±a', 'Fuengirola, Espa√±a', 'Mijas, Espa√±a',
            'Torremolinos, Espa√±a', 'Benalm√°dena, Espa√±a', 'V√©lez-M√°laga, Espa√±a', 'Nerja, Espa√±a',
            'Motril, Espa√±a', 'Baza, Espa√±a', 'Guadix, Espa√±a', 'Linares, Espa√±a', 'And√∫jar, Espa√±a',
            'Martos, Espa√±a', '√öbeda, Espa√±a', 'Baeza, Espa√±a', 'Alcal√° la Real, Espa√±a',
            'Sanl√∫car de Barrameda, Espa√±a', 'Chiclana de la Frontera, Espa√±a', 'Conil de la Frontera, Espa√±a',
            'Barbate, Espa√±a', 'Tarifa, Espa√±a', 'Algeciras, Espa√±a', 'La L√≠nea de la Concepci√≥n, Espa√±a',
            'Arcos de la Frontera, Espa√±a', 'Rota, Espa√±a', 'El Puerto de Santa Mar√≠a, Espa√±a',
            'Lebrija, Espa√±a', 'Utrera, Espa√±a', '√âcija, Espa√±a', 'Osuna, Espa√±a', 'Estepa, Espa√±a',
            'Marchena, Espa√±a', 'Mor√≥n de la Frontera, Espa√±a', 'Carmona, Espa√±a', 'Alcal√° de Guada√≠ra, Espa√±a',
            'Dos Hermanas, Espa√±a', 'Mairena del Aljarafe, Espa√±a', 'Coria del R√≠o, Espa√±a',
            'Ayamonte, Espa√±a', 'Isla Cristina, Espa√±a', 'Lepe, Espa√±a', 'Cartaya, Espa√±a',
            'Almonte, Espa√±a', 'Moguer, Espa√±a', 'Palos de la Frontera, Espa√±a', 'La Palma del Condado, Espa√±a',
            
            // Castilla y Le√≥n
            'Ponferrada, Espa√±a', 'Astorga, Espa√±a', 'Bembibre, Espa√±a', 'La Ba√±eza, Espa√±a',
            'Medina del Campo, Espa√±a', 'Aranda de Duero, Espa√±a', 'Miranda de Ebro, Espa√±a',
            'Soria, Espa√±a', '√Åvila, Espa√±a', 'Ar√©valo, Espa√±a', 'B√©jar, Espa√±a', 'Ciudad Rodrigo, Espa√±a',
            'Pe√±aranda de Bracamonte, Espa√±a', 'Alba de Tormes, Espa√±a', 'Guijuelo, Espa√±a',
            'Villablino, Espa√±a', 'Villaquilambre, Espa√±a', 'San Andr√©s del Rabanedo, Espa√±a',
            
            // Galicia
            'Santiago de Compostela, Espa√±a', 'Lugo, Espa√±a', 'Ferrol, Espa√±a', 'Pontevedra, Espa√±a',
            'Ourense, Espa√±a', 'Vilagarc√≠a de Arousa, Espa√±a', 'Redondela, Espa√±a', 'Cangas, Espa√±a',
            'Mar√≠n, Espa√±a', 'Tui, Espa√±a', 'O Grove, Espa√±a', 'Cambados, Espa√±a', 'Lal√≠n, Espa√±a',
            'Ribeira, Espa√±a', 'Noia, Espa√±a', 'Padr√≥n, Espa√±a', 'Carballo, Espa√±a', 'Betanzos, Espa√±a',
            'Viveiro, Espa√±a', 'Monforte de Lemos, Espa√±a', 'Ver√≠n, Espa√±a', 'O Barco de Valdeorras, Espa√±a',
            
            // Asturias
            'Langreo, Espa√±a', 'Mieres, Espa√±a', 'Avil√©s, Espa√±a', 'Siero, Espa√±a', 'Castrill√≥n, Espa√±a',
            'Llanera, Espa√±a', 'Corvera de Asturias, Espa√±a', 'Carre√±o, Espa√±a', 'Goz√≥n, Espa√±a',
            'Villaviciosa, Espa√±a', 'Cangas de On√≠s, Espa√±a', 'Llanes, Espa√±a', 'Ribadesella, Espa√±a',
            
            // Cantabria
            'Camargo, Espa√±a', 'Pi√©lagos, Espa√±a', 'Santa Mar√≠a de Cay√≥n, Espa√±a', 'El Astillero, Espa√±a',
            'Laredo, Espa√±a', 'Castro-Urdiales, Espa√±a', 'Santo√±a, Espa√±a', 'Reinosa, Espa√±a',
            'Los Corrales de Buelna, Espa√±a', 'Torrelavega, Espa√±a',
            
            // Pa√≠s Vasco
            'Donostia, Espa√±a', 'Ir√∫n, Espa√±a', 'Errenteria, Espa√±a', 'Pasaia, Espa√±a', 'Hondarribia, Espa√±a',
            'Zarautz, Espa√±a', 'Getaria, Espa√±a', 'Azpeitia, Espa√±a', 'Tolosa, Espa√±a', 'Beasain, Espa√±a',
            'Arrasate, Espa√±a', 'Eibar, Espa√±a', 'Ermua, Espa√±a', 'Durango, Espa√±a', 'Gernika, Espa√±a',
            'Leioa, Espa√±a', 'Getxo, Espa√±a', 'Portugalete, Espa√±a', 'Santurtzi, Espa√±a', 'Basauri, Espa√±a',
            'Galdakao, Espa√±a', 'Llodio, Espa√±a', 'Amurrio, Espa√±a',
            
            // Latinoam√©rica - Capitales y ciudades principales
            'Buenos Aires, Argentina', 'C√≥rdoba, Argentina', 'Rosario, Argentina', 'La Plata, Argentina',
            'Mar del Plata, Argentina', 'Tucum√°n, Argentina', 'Salta, Argentina', 'Mendoza, Argentina',
            'La Paz, Bolivia', 'Santa Cruz de la Sierra, Bolivia', 'Cochabamba, Bolivia', 'Sucre, Bolivia',
            'S√£o Paulo, Brasil', 'Rio de Janeiro, Brasil', 'Bras√≠lia, Brasil', 'Salvador, Brasil',
            'Fortaleza, Brasil', 'Belo Horizonte, Brasil', 'Manaus, Brasil', 'Curitiba, Brasil',
            'Recife, Brasil', 'Porto Alegre, Brasil', 'Santiago, Chile', 'Valpara√≠so, Chile',
            'Concepci√≥n, Chile', 'Antofagasta, Chile', 'Vi√±a del Mar, Chile', 'Valdivia, Chile',
            'Bogot√°, Colombia', 'Medell√≠n, Colombia', 'Cali, Colombia', 'Barranquilla, Colombia',
            'Cartagena, Colombia', 'Bucaramanga, Colombia', 'Pereira, Colombia', 'Ibagu√©, Colombia',
            'San Jos√©, Costa Rica', 'Cartago, Costa Rica', 'Puntarenas, Costa Rica', 'Alajuela, Costa Rica',
            'Quito, Ecuador', 'Guayaquil, Ecuador', 'Cuenca, Ecuador', 'Ambato, Ecuador',
            'San Salvador, El Salvador', 'Santa Ana, El Salvador', 'San Miguel, El Salvador',
            'Guatemala, Guatemala', 'Quetzaltenango, Guatemala', 'Antigua Guatemala, Guatemala',
            'Tegucigalpa, Honduras', 'San Pedro Sula, Honduras', 'La Ceiba, Honduras',
            'Ciudad de M√©xico, M√©xico', 'Guadalajara, M√©xico', 'Monterrey, M√©xico', 'Puebla, M√©xico',
            'Tijuana, M√©xico', 'Le√≥n, M√©xico', 'Ju√°rez, M√©xico', 'Torre√≥n, M√©xico',
            'Quer√©taro, M√©xico', 'M√©rida, M√©xico', 'Managua, Nicaragua', 'Le√≥n, Nicaragua',
            'Ciudad de Panam√°, Panam√°', 'Col√≥n, Panam√°', 'Asunci√≥n, Paraguay', 'Ciudad del Este, Paraguay',
            'Lima, Per√∫', 'Arequipa, Per√∫', 'Trujillo, Per√∫', 'Chiclayo, Per√∫',
            'Cusco, Per√∫', 'Iquitos, Per√∫', 'Santo Domingo, Rep√∫blica Dominicana', 'Santiago, Rep√∫blica Dominicana',
            'Montevideo, Uruguay', 'Salto, Uruguay', 'Paysand√∫, Uruguay', 'Caracas, Venezuela',
            'Maracaibo, Venezuela', 'Valencia, Venezuela', 'Barquisimeto, Venezuela',
            
            // Estados Unidos - Ciudades principales
            'New York, Estados Unidos', 'Los Angeles, Estados Unidos', 'Chicago, Estados Unidos',
            'Houston, Estados Unidos', 'Phoenix, Estados Unidos', 'Philadelphia, Estados Unidos',
            'San Antonio, Estados Unidos', 'San Diego, Estados Unidos', 'Dallas, Estados Unidos',
            'San Jose, Estados Unidos', 'Miami, Estados Unidos', 'Boston, Estados Unidos',
            'Seattle, Estados Unidos', 'Denver, Estados Unidos', 'Washington, Estados Unidos',
            'Las Vegas, Estados Unidos', 'Portland, Estados Unidos', 'Detroit, Estados Unidos',
            
            // Europa - Capitales y ciudades principales
            'Paris, Francia', 'Lyon, Francia', 'Marseille, Francia', 'Nice, Francia',
            'Berlin, Alemania', 'Munich, Alemania', 'Hamburg, Alemania', 'Cologne, Alemania',
            'Rome, Italia', 'Milan, Italia', 'Naples, Italia', 'Turin, Italia',
            'Florence, Italia', 'Venice, Italia', 'London, Reino Unido', 'Manchester, Reino Unido',
            'Birmingham, Reino Unido', 'Liverpool, Reino Unido', 'Edinburgh, Reino Unido',
            'Amsterdam, Pa√≠ses Bajos', 'Rotterdam, Pa√≠ses Bajos', 'The Hague, Pa√≠ses Bajos',
            'Brussels, B√©lgica', 'Antwerp, B√©lgica', 'Zurich, Suiza', 'Geneva, Suiza',
            'Vienna, Austria', 'Salzburg, Austria', 'Stockholm, Suecia', 'Gothenburg, Suecia',
            'Oslo, Noruega', 'Bergen, Noruega', 'Copenhagen, Dinamarca', 'Helsinki, Finlandia',
            
            // Otras regiones importantes
            'Tokyo, Jap√≥n', 'Osaka, Jap√≥n', 'Kyoto, Jap√≥n', 'Beijing, China',
            'Shanghai, China', 'Hong Kong, China', 'Seoul, Corea del Sur', 'Mumbai, India',
            'Delhi, India', 'Bangalore, India', 'Sydney, Australia', 'Melbourne, Australia',
            'Toronto, Canad√°', 'Vancouver, Canad√°', 'Montreal, Canad√°'
        ];
    }

    // Actualizar la lista de opciones del datalist
    actualizarListaCiudades(ciudades) {
        const datalist = document.getElementById('ciudades');
        if (!datalist) return;

        // Limpiar opciones existentes
        datalist.innerHTML = '';

        // Agregar nuevas opciones
        ciudades.forEach(ciudad => {
            const option = document.createElement('option');
            option.value = ciudad;
            datalist.appendChild(option);
        });
    }

    // Limpiar la lista de ciudades
    limpiarListaCiudades() {
        const datalist = document.getElementById('ciudades');
        if (datalist) {
            datalist.innerHTML = '';
        }
    }

    // Cargar ciudades por defecto en caso de error
    cargarCiudadesPorDefecto(termino = '') {
        const ciudadesDefecto = [
            'Madrid, Espa√±a', 'Barcelona, Espa√±a', 'Valencia, Espa√±a', 'Sevilla, Espa√±a',
            'Zaragoza, Espa√±a', 'M√°laga, Espa√±a', 'Murcia, Espa√±a', 'Bilbao, Espa√±a',
            'Alicante, Espa√±a', 'C√≥rdoba, Espa√±a', 'Granada, Espa√±a', 'Pamplona, Espa√±a',
            'Buenos Aires, Argentina', 'S√£o Paulo, Brasil', 'Santiago, Chile', 'Bogot√°, Colombia',
            'Ciudad de M√©xico, M√©xico', 'Lima, Per√∫', 'Caracas, Venezuela', 'Montevideo, Uruguay'
        ];
        
        // Filtrar por t√©rmino si se proporciona
        const ciudadesFiltradas = termino ? 
            ciudadesDefecto.filter(ciudad => 
                ciudad.toLowerCase().includes(termino.toLowerCase())
            ) : ciudadesDefecto;
            
        this.actualizarListaCiudades(ciudadesFiltradas);
    }

    // Inicializar con ciudades populares al cargar la aplicaci√≥n
    inicializarCiudadesPopulares() {
        const ciudadesPopulares = [
            'Madrid, Espa√±a', 'Barcelona, Espa√±a', 'Valencia, Espa√±a', 'Sevilla, Espa√±a',
            'Buenos Aires, Argentina', 'S√£o Paulo, Brasil', 'Ciudad de M√©xico, M√©xico',
            'Bogot√°, Colombia', 'Lima, Per√∫', 'Santiago, Chile', 'Caracas, Venezuela',
            'Paris, Francia', 'London, Reino Unido', 'Rome, Italia', 'Berlin, Alemania',
            'New York, Estados Unidos', 'Los Angeles, Estados Unidos', 'Miami, Estados Unidos'
        ];
        this.actualizarListaCiudades(ciudadesPopulares);
    }

    // Operaciones CRUD
    async editDifunto(id) {
        try {
            const difunto = await window.electronAPI.getDifunto(id);
            
            // Cargar parcelas disponibles primero
            await this.loadParcelasDisponibles();
            
            this.populateDifuntoForm(difunto);
            
            // Marcar el formulario como en modo edici√≥n
            const form = document.getElementById('form-difunto');
            form.dataset.editingId = id;
            
            // Cambiar el t√≠tulo del modal
            const modalTitle = document.querySelector('#modal-difunto .modal-header h3');
            if (modalTitle) modalTitle.textContent = 'Editar Difunto';
            
            this.openModal('modal-difunto');
        } catch (error) {
            console.error('Error editando difunto:', error);
            this.showNotification('Error al cargar los datos del difunto', 'error');
        }
    }

    async deleteDifunto(id) {
        try {
            // Obtener informaci√≥n del difunto
            const difunto = await window.electronAPI.getDifunto(id);
            if (!difunto) {
                this.showNotification('No se pudo encontrar el registro del difunto', 'error');
                return;
            }

            // Mostrar di√°logo de confirmaci√≥n personalizado
            const message = `
                <div class="confirmation-dialog compact">
                    <div class="warning-section">
                        <div class="warning-icon">‚ö†Ô∏è</div>
                        <h3>Eliminar Registro de Difunto</h3>
                    </div>
                    
                    <div class="compact-info">
                        <strong>üë§ ${difunto.nombre} ${difunto.apellidos}</strong> (ID: ${difunto.id})<br>
                        üìÖ ${this.formatDate(difunto.fecha_nacimiento)} - ${this.formatDate(difunto.fecha_defuncion)}<br>
                        ${difunto.lugar_nacimiento ? `üìç ${difunto.lugar_nacimiento}<br>` : ''}${difunto.parcela_codigo ? `üèõÔ∏è Parcela: ${difunto.parcela_codigo}` : '<span class="badge badge-sin-asignar">Sin parcela asignada</span>'}
                    </div>
                    
                    ${difunto.parcela_codigo ? `
                    <div class="info-notice">
                        <p>La parcela asignada ser√° liberada autom√°ticamente.</p>
                    </div>
                    ` : ''}
                </div>
            `;

            const result = await this.showCustomDialog({
                title: '‚ö†Ô∏è Confirmar Eliminaci√≥n de Difunto',
                message: message,
                headerClass: 'about-header',
                buttons: [
                    { id: 'btn-confirm', class: 'btn-danger-modern', text: 'üóëÔ∏è Eliminar Registro', value: 'confirm' }
                ],
                critical: true
            });

            if (result === 'confirm') {
                try {
                    await window.electronAPI.deleteDifunto(id);
                    this.showNotification('Registro eliminado correctamente', 'success');
                    
                    // Actualizar la secci√≥n actual si corresponde
                    if (this.currentSection === 'difuntos') {
                        await this.loadDifuntos();
                    }
                    if (this.currentSection === 'parcelas') {
                        await this.loadParcelas(); // Actualizar porque una parcela puede haberse liberado
                    }
                    
                    // SIEMPRE actualizar dashboard para refrescar estad√≠sticas
                    await this.loadDashboard();
                    await this.loadRecentActivity(); // Actualizar actividad reciente
                } catch (error) {
                    this.showNotification('Error al eliminar el registro', 'error');
                }
            }

        } catch (error) {
            console.error('Error en deleteDifunto:', error);
            this.showNotification('Error al cargar la informaci√≥n del difunto', 'error');
        }
    }

    async editParcela(id) {
        try {
            const parcela = await window.electronAPI.getParcela(id);
            this.populateParcelaForm(parcela);
            
            // Marcar el formulario como en modo edici√≥n
            const form = document.getElementById('form-parcela');
            form.dataset.editingId = id;
            
            // Cambiar el t√≠tulo del modal
            const modalTitle = document.querySelector('#modal-parcela .modal-header h3');
            if (modalTitle) modalTitle.textContent = 'Editar Parcela';
            
            this.openModal('modal-parcela');
        } catch (error) {
            console.error('Error editando parcela:', error);
            this.showNotification('Error al cargar los datos de la parcela', 'error');
        }
    }

    async deleteParcela(id) {
        try {
            // Primero verificar si la parcela tiene difuntos asignados
            const dependencies = await window.electronAPI.checkParcelaDependencies(id);
            
            if (dependencies.error) {
                this.showNotification('Error al verificar la parcela: ' + dependencies.error, 'error');
                return;
            }
            
            const { parcela, difuntosAsignados, canDelete } = dependencies;
            
            // Mostrar modal de confirmaci√≥n personalizado
            this.showParcelaDeleteConfirmation(parcela, difuntosAsignados, canDelete);
            
        } catch (error) {
            console.error('Error en deleteParcela:', error);
            this.showNotification('Error al procesar la eliminaci√≥n de la parcela', 'error');
        }
    }
    
    showParcelaDeleteConfirmation(parcela, difuntosAsignados, canDelete) {
        let message, headerClass, buttons;
        
        if (canDelete) {
            // Sin dependencias - eliminaci√≥n simple (formato compacto)
            message = `
                <div class="confirmation-dialog compact">
                    <div class="parcela-info-section">
                        <div class="success-icon">‚úÖ</div>
                        <h3>Eliminaci√≥n Simple</h3>
                        <div class="compact-info">
                            <strong>üìç Parcela:</strong> ${parcela.codigo} (${parcela.tipo})<br>
                            <strong>üó∫Ô∏è Ubicaci√≥n:</strong> ${parcela.zona} - ${parcela.seccion}-${parcela.numero}
                        </div>
                        <div class="safe-delete-notice">
                            <p>Esta parcela no tiene difuntos asignados y se puede eliminar de forma segura.</p>
                        </div>
                    </div>
                </div>
            `;
            headerClass = 'about-header';
            buttons = [
                { id: 'btn-confirm', class: 'btn-danger-modern', text: 'üóëÔ∏è Eliminar Parcela', value: 'confirm' }
            ];
        } else {
            // Con dependencias - eliminaci√≥n con liberaci√≥n (formato compacto)
            const difuntosCompactos = difuntosAsignados.map(d => `üë§ ${d.nombre} ${d.apellidos} (ID: ${d.id})`).join(', ');
            
            message = `
                <div class="confirmation-dialog compact">
                    <div class="warning-section">
                        <div class="warning-icon">‚ö†Ô∏è</div>
                        <h3>Parcela con ${difuntosAsignados.length} Difunto(s)</h3>
                    </div>
                    
                    <div class="compact-info">
                        <p><strong>üèûÔ∏è Parcela:</strong> ${parcela.codigo} (${parcela.tipo})</p>
                        <p><strong>‚ö∞Ô∏è Difuntos:</strong> ${difuntosCompactos}</p>
                        <p><strong>‚ö†Ô∏è Acci√≥n:</strong> Los difuntos ser√°n liberados autom√°ticamente</p>
                    </div>
                </div>
            `;
            headerClass = 'about-header';
            buttons = [
                { id: 'btn-confirm', class: 'btn-warning-modern', text: 'üîÑ Liberar y Eliminar', value: 'confirm' }
            ];
        }
        
        this.showCustomDialog({
            title: '‚ö†Ô∏è Confirmar Eliminaci√≥n de Parcela',
            message: message,
            headerClass: 'about-header',
            buttons: buttons,
            critical: true
        }).then((result) => {
            if (result === 'confirm') {
                this.performParcelaDelete(parcela.id, !canDelete);
            }
        });
    }
    
    async performParcelaDelete(id, isForced) {
        try {
            let result;
            
            if (isForced) {
                // Eliminaci√≥n forzada: liberar difuntos primero
                result = await window.electronAPI.forceDeleteParcela(id);
                this.showNotification('‚úÖ Parcela eliminada y difuntos liberados correctamente', 'success');
            } else {
                // Eliminaci√≥n normal
                result = await window.electronAPI.deleteParcela(id);
                this.showNotification('‚úÖ Parcela eliminada correctamente', 'success');
            }
            
            if (result.error) {
                throw new Error(result.error);
            }
            
            // Actualizar todas las secciones relevantes
            if (this.currentSection === 'parcelas') {
                await this.loadParcelas();
            }
            if (this.currentSection === 'difuntos') {
                await this.loadDifuntos(); // Actualizar porque algunos difuntos pueden perder su parcela
            }
            
            // SIEMPRE actualizar dashboard para refrescar estad√≠sticas
            await this.loadDashboard();
            await this.loadRecentActivity(); // Actualizar actividad reciente
            
        } catch (error) {
            console.error('Error eliminando parcela:', error);
            this.showNotification('‚ùå Error al eliminar la parcela: ' + error.message, 'error');
        }
    }

    populateDifuntoForm(difunto) {
        const form = document.getElementById('form-difunto');
        if (!form) return;

        form.querySelector('[name="nombre"]').value = difunto.nombre || '';
        form.querySelector('[name="apellidos"]').value = difunto.apellidos || '';
        form.querySelector('[name="documento"]').value = difunto.cedula || '';
        form.querySelector('[name="sexo"]').value = difunto.sexo || 'M';
        form.querySelector('[name="fecha_nacimiento"]').value = difunto.fecha_nacimiento || '';
        form.querySelector('[name="fecha_defuncion"]').value = difunto.fecha_defuncion || '';
        form.querySelector('[name="lugar_nacimiento"]').value = difunto.lugar_nacimiento || '';
        form.querySelector('[name="causa_muerte"]').value = difunto.causa_muerte || '';
        form.querySelector('[name="observaciones"]').value = difunto.observaciones || '';
        form.querySelector('[name="parcela_id"]').value = difunto.parcela_id || '';
        
        // Actualizar mensaje informativo de parcela con informaci√≥n completa
        this.updateParcelaMensajeEnEdicion(difunto.parcela_id);
        
        form.dataset.editId = difunto.id;
    }

    populateParcelaForm(parcela) {
        const form = document.getElementById('form-parcela');
        if (!form) return;

        form.querySelector('[name="codigo"]').value = parcela.codigo || '';
        form.querySelector('[name="tipo"]').value = parcela.tipo || '';
        form.querySelector('[name="zona"]').value = parcela.zona || 'Nueva';
        form.querySelector('[name="seccion"]').value = parcela.seccion || '';
        form.querySelector('[name="fila"]').value = parcela.fila || '';
        form.querySelector('[name="numero"]').value = parcela.numero || '';
        form.querySelector('[name="ubicacion"]').value = parcela.ubicacion || 'Centro';
        form.querySelector('[name="precio"]').value = parcela.precio || '';
        form.querySelector('[name="observaciones"]').value = parcela.observaciones || '';
        
        form.dataset.editId = parcela.id;
    }

    // Utilidades
    formatDate(dateString) {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        return date.toLocaleDateString('es-ES');
    }

    showLoading(containerId) {
        const container = document.getElementById(containerId);
        if (container) {
            container.classList.add('loading');
        }
    }

    hideLoading(containerId) {
        const container = document.getElementById(containerId);
        if (container) {
            container.classList.remove('loading');
        }
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Funciones de configuraci√≥n
    
    // Helper para crear di√°logos personalizados
    showCustomDialog(config) {
        return new Promise((resolve) => {
            const dialog = document.createElement('div');
            dialog.className = 'custom-dialog-overlay';
            
            let buttonsHtml = '';
            if (config.buttons) {
                buttonsHtml = config.buttons.map(btn => 
                    `<button id="${btn.id}" class="btn ${btn.class}">${btn.text}</button>`
                ).join('');
            } else {
                buttonsHtml = `<button id="btn-ok" class="btn btn-primary">‚úÖ Aceptar</button>`;
            }

            dialog.innerHTML = `
                <div class="custom-dialog ${config.type === 'info' ? 'info-dialog' : ''}">
                    <div class="dialog-header ${config.headerClass || ''}">
                        <h3>${config.title}</h3>
                        <button class="dialog-close-btn" id="dialog-close">√ó</button>
                    </div>
                    <div class="dialog-content">
                        <div class="dialog-message">${config.message}</div>
                        <div class="dialog-buttons">
                            ${buttonsHtml}
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(dialog);

            // Event listener para el bot√≥n de cerrar (X)
            dialog.querySelector('#dialog-close').addEventListener('click', () => {
                document.body.removeChild(dialog);
                resolve('cancel');
            });

            // Agregar event listeners
            if (config.buttons) {
                config.buttons.forEach(btn => {
                    dialog.querySelector(`#${btn.id}`).addEventListener('click', () => {
                        document.body.removeChild(dialog);
                        resolve(btn.value || btn.id);
                    });
                });
            } else {
                dialog.querySelector('#btn-ok').addEventListener('click', () => {
                    document.body.removeChild(dialog);
                    resolve('ok');
                });
            }

            // Cerrar con Escape
            const handleEscape = (e) => {
                if (e.key === 'Escape') {
                    document.body.removeChild(dialog);
                    document.removeEventListener('keydown', handleEscape);
                    resolve('cancel');
                }
            };
            document.addEventListener('keydown', handleEscape);

            // Cerrar al hacer clic fuera del di√°logo (solo si no es cr√≠tico)
            if (!config.critical) {
                dialog.addEventListener('click', (e) => {
                    if (e.target === dialog) {
                        document.body.removeChild(dialog);
                        resolve('cancel');
                    }
                });
            }
        });
    }

    showBackupDialog() {
        return new Promise((resolve) => {
            // Crear un di√°logo personalizado
            const dialog = document.createElement('div');
            dialog.className = 'custom-dialog-overlay';
            dialog.innerHTML = `
                <div class="custom-dialog">
                    <div class="dialog-header">
                        <h3>üóÉÔ∏è Respaldar Base de Datos</h3>
                    </div>
                    <div class="dialog-content">
                        <p>¬øD√≥nde desea guardar el respaldo de la base de datos?</p>
                        <div class="dialog-buttons">
                            <button id="btn-custom-folder" class="btn btn-primary">
                                üìÅ Seleccionar Carpeta
                            </button>
                            <button id="btn-default-folder" class="btn btn-secondary">
                                üè† Carpeta por Defecto
                            </button>
                            <button id="btn-cancel-backup" class="btn btn-danger">
                                ‚ùå Cancelar
                            </button>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(dialog);

            // Agregar event listeners
            dialog.querySelector('#btn-custom-folder').addEventListener('click', () => {
                document.body.removeChild(dialog);
                resolve('custom');
            });

            dialog.querySelector('#btn-default-folder').addEventListener('click', () => {
                document.body.removeChild(dialog);
                resolve('default');
            });

            dialog.querySelector('#btn-cancel-backup').addEventListener('click', () => {
                document.body.removeChild(dialog);
                resolve('cancel');
            });

            // Cerrar con Escape
            const handleEscape = (e) => {
                if (e.key === 'Escape') {
                    document.body.removeChild(dialog);
                    document.removeEventListener('keydown', handleEscape);
                    resolve('cancel');
                }
            };
            document.addEventListener('keydown', handleEscape);

            // Cerrar al hacer clic fuera del di√°logo
            dialog.addEventListener('click', (e) => {
                if (e.target === dialog) {
                    document.body.removeChild(dialog);
                    resolve('cancel');
                }
            });
        });
    }

    async backupDatabase() {
        try {
            // Mostrar di√°logo personalizado con tres opciones
            const userChoice = await this.showBackupDialog();
            
            if (userChoice === 'cancel') {
                this.showNotification('Operaci√≥n de respaldo cancelada', 'info');
                return;
            }
            
            let customPath = null;
            
            if (userChoice === 'custom') {
                // Mostrar di√°logo de selecci√≥n de carpeta
                const folderResult = await window.electronAPI.selectBackupFolder();
                
                if (folderResult.error) {
                    throw new Error(folderResult.error);
                }
                
                if (folderResult.canceled) {
                    this.showNotification('Selecci√≥n de carpeta cancelada', 'info');
                    return;
                }
                
                if (folderResult.success) {
                    customPath = folderResult.folderPath;
                }
            }
            
            this.showNotification('Iniciando respaldo de base de datos...', 'info');
            
            const result = await window.electronAPI.backupDatabase(customPath);
            
            if (result.error) {
                throw new Error(result.error);
            }
            
            if (result.success) {
                const locationText = result.customPath ? 
                    'Ubicaci√≥n personalizada' : 
                    'Carpeta por defecto (backups/)';
                
                const message = `Respaldo creado exitosamente\n\n` +
                              `Archivo: ${result.fileName}\n` +
                              `Tama√±o: ${result.size}\n` +
                              `Ubicaci√≥n: ${locationText}\n` +
                              `Ruta completa: ${result.backupPath}\n` +
                              `Fecha: ${result.date}`;
                
                this.showNotification('Respaldo completado exitosamente', 'success');
                
                // Mostrar informaci√≥n detallada en di√°logo personalizado
                setTimeout(() => {
                    this.showCustomDialog({
                        title: 'üéâ Respaldo Exitoso',
                        message: `
                            <div class="success-message">
                                <div class="success-icon">‚úÖ</div>
                                <h4>¬°Respaldo creado exitosamente!</h4>
                                <div class="backup-details">
                                    <div class="detail-item">
                                        <strong>üìÑ Archivo:</strong> ${result.fileName}
                                    </div>
                                    <div class="detail-item">
                                        <strong>üìä Tama√±o:</strong> ${result.size}
                                    </div>
                                    <div class="detail-item">
                                        <strong>üìç Ubicaci√≥n:</strong> ${locationText}
                                    </div>
                                    <div class="detail-item">
                                        <strong>üóÇÔ∏è Ruta completa:</strong> <code>${result.backupPath}</code>
                                    </div>
                                    <div class="detail-item">
                                        <strong>üïí Fecha:</strong> ${result.date}
                                    </div>
                                </div>
                            </div>
                        `,
                        headerClass: 'success-header',
                        type: 'info'
                    });
                }, 500);
            }
        } catch (error) {
            console.error('Error al crear respaldo:', error);
            this.showNotification('Error al crear el respaldo: ' + error.message, 'error');
        }
    }

    async optimizeDatabase() {
        try {
            this.showNotification('Optimizando base de datos...', 'info');
            
            const result = await window.electronAPI.optimizeDatabase();
            
            if (result.error) {
                throw new Error(result.error);
            }
            
            if (result.success) {
                const message = `Optimizaci√≥n completada\n` +
                              `Operaciones realizadas:\n${result.results.join('\n')}\n` +
                              `Tiempo de ejecuci√≥n: ${result.executionTime}\n` +
                              `Fecha: ${result.date}`;
                
                this.showNotification('Base de datos optimizada correctamente', 'success');
                
                // Mostrar informaci√≥n detallada en di√°logo personalizado
                setTimeout(() => {
                    this.showCustomDialog({
                        title: '‚ö° Optimizaci√≥n Completada',
                        message: `
                            <div class="success-message">
                                <div class="success-icon">üöÄ</div>
                                <h4>¬°Base de datos optimizada correctamente!</h4>
                                <div class="optimization-details">
                                    <div class="detail-item">
                                        <strong>‚è±Ô∏è Tiempo de ejecuci√≥n:</strong> ${result.executionTime}
                                    </div>
                                    <div class="detail-item">
                                        <strong>üîß Operaciones realizadas:</strong>
                                        <ul class="operations-list">
                                            ${result.results.map(op => `<li>‚úì ${op}</li>`).join('')}
                                        </ul>
                                    </div>
                                    <div class="detail-item">
                                        <strong>üïí Fecha:</strong> ${result.date}
                                    </div>
                                </div>
                                <div class="optimization-benefits">
                                    <small>üí° <strong>Beneficios:</strong> Mejor rendimiento, menor uso de espacio y consultas m√°s r√°pidas.</small>
                                </div>
                            </div>
                        `,
                        headerClass: 'success-header',
                        type: 'info'
                    });
                }, 500);
            }
        } catch (error) {
            console.error('Error al optimizar:', error);
            this.showNotification('Error al optimizar: ' + error.message, 'error');
        }
    }

    savePreferences() {
        try {
            const theme = document.getElementById('theme-select').value;
            const recordsPerPage = document.getElementById('records-per-page').value;
            
            // Guardar en localStorage
            localStorage.setItem('cementerio-theme', theme);
            localStorage.setItem('cementerio-records-per-page', recordsPerPage);
            
            this.showNotification('Preferencias guardadas correctamente', 'success');
            
            // Mostrar confirmaci√≥n con di√°logo personalizado
            setTimeout(() => {
                this.showCustomDialog({
                    title: 'üíæ Preferencias Guardadas',
                    message: `
                        <div class="success-message">
                            <div class="success-icon">‚úÖ</div>
                            <h4>¬°Preferencias guardadas exitosamente!</h4>
                            <div class="preferences-details">
                                <div class="detail-item">
                                    <strong>üé® Tema seleccionado:</strong> ${this.getThemeDisplayName(theme)}
                                </div>
                                <div class="detail-item">
                                    <strong>üìÑ Registros por p√°gina:</strong> ${recordsPerPage}
                                </div>
                            </div>
                            <div class="preferences-note">
                                <small>üí° <strong>Nota:</strong> Los cambios se aplicar√°n en la pr√≥xima sesi√≥n o al recargar la aplicaci√≥n.</small>
                            </div>
                        </div>
                    `,
                    headerClass: 'success-header',
                    type: 'info'
                });
            }, 500);
        } catch (error) {
            this.showNotification('Error al guardar preferencias: ' + error.message, 'error');
        }
    }

    getThemeDisplayName(theme) {
        const themes = {
            'light': '‚òÄÔ∏è Claro',
            'dark': 'üåô Oscuro',
            'auto': 'üîÑ Autom√°tico'
        };
        return themes[theme] || theme;
    }

    async resetPreferences() {
        const userChoice = await this.showCustomDialog({
            title: 'üîÑ Restaurar Configuraciones',
            message: `
                <div class="warning-message">
                    <div class="warning-icon">‚ö†Ô∏è</div>
                    <h4>¬øRestaurar configuraciones predeterminadas?</h4>
                    <p>Esta acci√≥n restaurar√° todas las preferencias a sus valores originales:</p>
                    <div class="reset-details">
                        <div class="detail-item">‚Ä¢ <strong>Tema:</strong> Claro</div>
                        <div class="detail-item">‚Ä¢ <strong>Registros por p√°gina:</strong> 50</div>
                    </div>
                    <p><strong>Esta acci√≥n no se puede deshacer.</strong></p>
                </div>
            `,
            headerClass: 'warning-header',
            buttons: [
                { id: 'btn-confirm', class: 'btn-primary', text: '‚úÖ Confirmar', value: 'confirm' },
                { id: 'btn-cancel', class: 'btn-secondary', text: '‚ùå Cancelar', value: 'cancel' }
            ]
        });

        if (userChoice === 'confirm') {
            try {
                // Limpiar localStorage
                localStorage.removeItem('cementerio-theme');
                localStorage.removeItem('cementerio-records-per-page');
                
                // Restaurar valores predeterminados
                document.getElementById('theme-select').value = 'light';
                document.getElementById('records-per-page').value = '50';
                
                this.showNotification('Configuraciones restauradas a valores predeterminados', 'success');
                
                // Mostrar confirmaci√≥n
                setTimeout(() => {
                    this.showCustomDialog({
                        title: 'üîÑ Configuraciones Restauradas',
                        message: `
                            <div class="success-message">
                                <div class="success-icon">‚úÖ</div>
                                <h4>¬°Configuraciones restauradas exitosamente!</h4>
                                <p>Todas las preferencias han sido restablecidas a sus valores predeterminados.</p>
                                <div class="reset-confirmation">
                                    <div class="detail-item">‚úì <strong>Tema:</strong> ‚òÄÔ∏è Claro</div>
                                    <div class="detail-item">‚úì <strong>Registros por p√°gina:</strong> 50</div>
                                </div>
                            </div>
                        `,
                        headerClass: 'success-header',
                        type: 'info'
                    });
                }, 500);
            } catch (error) {
                this.showNotification('Error al restaurar configuraciones: ' + error.message, 'error');
            }
        }
    }

    showAbout() {
        this.showCustomDialog({
            title: 'üèõÔ∏è Acerca del Sistema',
            message: `
                <div class="about-dialog">
                    <div class="app-info">
                        <h2>üèõÔ∏è Sistema de Gesti√≥n de Cementerio</h2>
                        <div class="version-info">
                            <span class="version-badge">v1.0.0</span>
                            <span class="tech-stack">Electron + Node.js + SQLite</span>
                        </div>
                    </div>
                    
                    <div class="developer-info">
                        <h3>üë®‚Äçüíª Informaci√≥n del Desarrollador</h3>
                        <div class="developer-card">
                            <div class="developer-name">
                                <strong>Alejandro Pastor Mayor</strong>
                            </div>
                            <div class="contact-info">
                                <div class="contact-item">
                                    <span class="contact-icon">üìû</span>
                                    <span>683 132 931</span>
                                </div>
                                <div class="contact-item">
                                    <span class="contact-icon">üá™üá∏</span>
                                    <span>Espa√±a</span>
                                </div>
                                <div class="contact-item">
                                    <span class="contact-icon">üìß</span>
                                    <span>Desarrollador de Software</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="features-info">
                        <h3>‚ö° Funcionalidades Principales</h3>
                        <div class="features-grid">
                            <div class="feature-item">
                                <span class="feature-icon">üë•</span>
                                <span>Gesti√≥n de Difuntos</span>
                            </div>
                            <div class="feature-item">
                                <span class="feature-icon">üèûÔ∏è</span>
                                <span>Administraci√≥n de Parcelas</span>
                            </div>
                            <div class="feature-item">
                                <span class="feature-icon">üîç</span>
                                <span>B√∫squeda Avanzada</span>
                            </div>
                            <div class="feature-item">
                                <span class="feature-icon">üíæ</span>
                                <span>Respaldo de Datos</span>
                            </div>
                            <div class="feature-item">
                                <span class="feature-icon">‚ö°</span>
                                <span>Optimizaci√≥n de BD</span>
                            </div>
                            <div class="feature-item">
                                <span class="feature-icon">üìä</span>
                                <span>Reportes y Estad√≠sticas</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="copyright-info">
                        <p>¬© 2025 Alejandro Pastor Mayor. Todos los derechos reservados.</p>
                        <p class="description">Sistema integral para la administraci√≥n profesional de cementerios y registro de difuntos.</p>
                    </div>
                </div>
            `,
            headerClass: 'about-header',
            type: 'info'
        });
    }

    async loadConfigurationInfo() {
        try {
            // Cargar informaci√≥n del sistema si la secci√≥n est√° activa
            if (this.currentSection === 'configuracion') {
                document.getElementById('app-version').textContent = '1.0.0';
                document.getElementById('platform').textContent = navigator.platform;
                document.getElementById('electron-version').textContent = 'Cargando...';
                
                // Obtener tama√±o real de la base de datos
                try {
                    const dbInfo = await window.electronAPI.getDatabaseSize();
                    if (dbInfo.success) {
                        const displaySize = dbInfo.fileSize.mb;
                        document.getElementById('db-size').textContent = displaySize;
                        
                        // Agregar tooltip con informaci√≥n detallada
                        const dbElement = document.getElementById('db-size');
                        if (dbElement) {
                            dbElement.title = `Espacio usado: ${dbInfo.database.usedSpace}\n` +
                                            `Espacio libre: ${dbInfo.database.freeSpace}\n` +
                                            `P√°ginas totales: ${dbInfo.database.totalPages}\n` +
                                            `√öltima modificaci√≥n: ${dbInfo.lastModified}`;
                        }
                    } else {
                        document.getElementById('db-size').textContent = 'Error al obtener';
                    }
                } catch (error) {
                    console.error('Error obteniendo tama√±o de BD:', error);
                    document.getElementById('db-size').textContent = 'No disponible';
                }
                
                // Cargar preferencias guardadas
                const savedTheme = localStorage.getItem('cementerio-theme') || 'light';
                const savedRecordsPerPage = localStorage.getItem('cementerio-records-per-page') || '50';
                
                document.getElementById('theme-select').value = savedTheme;
                document.getElementById('records-per-page').value = savedRecordsPerPage;
            }
        } catch (error) {
            console.error('Error cargando informaci√≥n de configuraci√≥n:', error);
        }
    }
}

// Inicializar la aplicaci√≥n cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', () => {
    window.app = new CementerioApp();
    
    // Hacer disponible el m√©todo updateParcelaMessage globalmente
    window.updateParcelaMessage = (parcelaId, parcelaText) => {
        if (window.app && typeof window.app.updateParcelaMessage === 'function') {
            window.app.updateParcelaMessage(parcelaId, parcelaText);
        }
    };
    
    // Hacer disponible el m√©todo buscarCiudades globalmente
    window.buscarCiudades = (termino) => {
        if (window.app && typeof window.app.buscarCiudades === 'function') {
            window.app.buscarCiudades(termino);
        } else {
            console.error('Window.app no est√° disponible o buscarCiudades no es una funci√≥n');
        }
    };
});
